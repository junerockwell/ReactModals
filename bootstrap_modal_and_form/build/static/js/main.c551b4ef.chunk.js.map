{"version":3,"sources":["components/Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Modal","show","children","close","showHideClassName","className","role","App","useState","showModal","setShowModal","hideModal","id","type","onClick","console","log","class","data-dismiss","aria-label","aria-hidden","for","rows","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oRAGe,SAASA,EAAT,GAA0C,IAAzBC,EAAwB,EAAxBA,KAAaC,GAAW,EAAlBC,MAAkB,EAAXD,UACnCE,EAAoBH,EAAO,UAAY,SAE7C,OACI,yBAAKI,UAAS,2BAAsBD,IAChC,yBAAKC,UAAU,eAAeC,KAAK,YAC/B,yBAAKD,UAAU,iBACbH,KCiFHK,MAvFf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,KAQPC,EAAY,WAChBD,GAAa,IAOf,OACE,yBAAKE,GAAG,UAAUP,UAAU,aAC1B,4BAAQQ,KAAK,SAASR,UAAU,kBAAkBS,QAflC,WAClBC,QAAQC,IAAI,eACZN,GAAa,KAaX,cAGA,kBAAC,EAAD,CAAOT,KAAMQ,EAAWN,MAAOQ,GAC7B,yBAAKN,UAAU,gBACb,wBAAIA,UAAU,eAAd,cAGA,4BAAQQ,KAAK,SAASI,MAAM,QAAQC,eAAa,QAAQC,aAAW,QAAQL,QAASH,GACnF,0BAAMS,cAAY,QAAlB,UAIJ,0BAAMf,UAAU,aACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cACb,2BAAOgB,IAAI,6BAAX,kBACA,4BAAQhB,UAAU,eAAeO,GAAG,6BAClC,qCACA,qCACA,qCACA,qCACA,yCAKR,yBAAKP,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,cACb,2BAAOgB,IAAI,6BAAX,oBACA,4BAAQhB,UAAU,eAAeO,GAAG,6BAClC,qCACA,qCACA,qCACA,qCACA,yCAKR,yBAAKP,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,2BAAOgB,IAAI,+BAAX,oBACA,8BAAUhB,UAAU,eAAeO,GAAG,8BAA8BU,KAAK,QAG7E,yBAAKjB,UAAU,SACb,yBAAKA,UAAU,cACb,2BAAOgB,IAAI,+BAAX,QACA,2BAAOR,KAAK,SAASR,UAAU,qCAMvC,yBAAKA,UAAU,sCACb,4BAAQQ,KAAK,SAASI,MAAM,uBAAuBH,QAASH,GAA5D,SACA,4BAAQE,KAAK,SAASI,MAAM,kBAAkBC,eAAa,QAAQJ,QAlEpD,WACrBJ,GAAa,KAiEP,cCtEUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.c551b4ef.chunk.js","sourcesContent":["import React from 'react';\nimport './Modal.css';\n\nexport default function Modal({ show, close, children}) {\n    const showHideClassName = show ? \"d-block\" : \"d-none\";\n\n    return (\n        <div className={`modal modal-mask ${showHideClassName}`}>\n            <div className=\"modal-dialog\" role=\"document\">\n                <div className=\"modal-content\">\n                { children }\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport './App.css';\nimport Modal from './components/Modal/Modal';\n\nfunction App() {\n  const [showModal, setShowModal] = useState(false);\n\n  const launchModal = () => {\n    console.log(\"launchModal\")\n    setShowModal(true);\n  }\n\n  const hideModal = () => {\n    setShowModal(false);\n  }\n\n  const submitAndClose = () => {\n    setShowModal(false);\n  }\n\n  return (\n    <div id=\"wrapper\" className=\"container\">\n      <button type=\"button\" className=\"btn btn-primary\" onClick={launchModal}>\n        Open Modal\n      </button>\n      <Modal show={showModal} close={hideModal}>\n        <div className=\"modal-header\">\n          <h4 className=\"modal-title\">\n              Some Entry\n          </h4>\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={hideModal}>\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        \n        <form className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"form-group\">\n                <label for=\"exampleFormControlSelect1\">Example select</label>\n                <select className=\"form-control\" id=\"exampleFormControlSelect1\">\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n                  <option>5</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"form-group\">\n                <label for=\"exampleFormControlSelect1\">Example select 2</label>\n                <select className=\"form-control\" id=\"exampleFormControlSelect1\">\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n                  <option>5</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-9\">\n              <div className=\"form-group\">\n                <label for=\"exampleFormControlTextarea1\">Example textarea</label>\n                <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"2\"></textarea>\n              </div>\n            </div>\n            <div className=\"col-3\">\n              <div className=\"form-group\">\n                <label for=\"exampleFormControlTextarea1\">Time</label>\n                <input type=\"number\" className=\"form-control form-control-lg\" />\n              </div>\n            </div>\n          </div>\n        </form>\n        \n        <div className=\"modal-footer justify-content-start\">\n          <button type=\"button\" class=\"btn btn-outline-info\" onClick={hideModal}>Close</button>\n          <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" onClick={submitAndClose}>\n            Submit\n          </button>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}